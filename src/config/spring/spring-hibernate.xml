<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
	
	<!-- 扫描并自动装配 -->
	<context:component-scan base-package="com.wxtb.dao" />
	<context:component-scan base-package="com.wxtb.service" />
	<context:component-scan base-package="com.wxtb.tools" />
	<!-- 属性文件读入 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config/properties/jdbc.properties</value>				
				<value>classpath:config/properties/hibernate.properties</value>
			</list>
		</property>
	</bean>
	 
	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${hibernate.connection.driver}" />	
		<property name="jdbcUrl" value="${hibernate.connection.url}" />		
		<property name="user" value="${hibernate.connection.username}" />	
		<property name="password" value="${hibernate.connection.password}" />		
		<property name="initialPoolSize" value="${cpool.minPoolSize}"/>	
		<property name="minPoolSize" value="${cpool.minPoolSize}" />	
		<property name="maxPoolSize" value="${cpool.maxPoolSize}" />	
		<property name="acquireIncrement" value="${cpool.acquireIncrement}" /> 
	   	<property name="maxIdleTime" value="${cpool.maxIdleTime}"/>
	   	<property name="numHelperThreads" value="${cpool.numHelperThreads}"/>
	   	<property name="maxStatements" value="${cpool.maxStatements}"/>	 
	   	 
	</bean>
	
	<!-- 配置SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 
		<property name="dataSource" ref="dataSource" />
		 -->
		<!-- 注册实体类模型注解 -->
		<property name="packagesToScan" value="com.wxtb.entity"/>
		<property name="hibernateProperties">
			<props>
				<!-- 数据库方言 -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<!-- 输出所有sql语句到控制台 -->
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<!-- 格式化输出的sql语句 -->
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<!-- ddl语句自动更新表  -->
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<!-- 非零值，指定JDBC抓取数量的大小，允许hiberante使用JDBC2的批量更新，建议取5-30之间的值 -->	
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<!-- 连接池配置 -->
				<prop key="hibernate.connection.provider_class">${hibernate.connection.provider_class}</prop>
				
				<prop key="hibernate.connection.driver_class">${hibernate.connection.driver}</prop>
				<prop key="hibernate.connection.url">${hibernate.connection.url}</prop>
				<prop key="hibernate.connection.username">${hibernate.connection.username}</prop>
				<prop key="hibernate.connection.password">${hibernate.connection.password}</prop>
				
				<prop key="hibernate.enable_lazy_load_no_trans">${hibernate.enable_lazy_load_no_trans}</prop>
				
				<!-- 
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>							
				
				<prop key="hibernate.search.default.directory_provider">${hibernate.search.default.directory_provider}</prop>  
		        <prop key="hibernate.search.default.indexBase">${hibernate.search.default.indexBase}</prop>
		        <prop key="hibernate.search.reader.strategy">${hibernate.search.reader.strategy}</prop>
		        <prop key="hibernate.search.analyzer">${hibernate.search.analyzer}</prop>
		         -->
			</props>
		</property>
	</bean>
	
	<!-- 注册事务注解处理器 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 配置hibernate事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->
	<!-- 只对业务逻辑层实施事务 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="merge*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="put*" propagation="REQUIRED" />
            <tx:method name="use*" propagation="REQUIRED"/>
            
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="count*" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
            <tx:method name="list*" propagation="REQUIRED" read-only="true" />
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>
    
    
    <aop:config expose-proxy="true" proxy-target-class="true" />
    
    <aop:config expose-proxy="true">
        <aop:pointcut id="txPointcut" expression="execution(* com.wxtb.dao..*.*(..)) or execution(* com.wxtb.service..*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
    
    
	
</beans>